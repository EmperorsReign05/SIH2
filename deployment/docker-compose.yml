version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: blue-carbon-postgres
    environment:
      POSTGRES_DB: blue_carbon_mrv
      POSTGRES_USER: ${DB_USER:-bluecarbon}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - blue-carbon-network
    restart: unless-stopped

  # Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: blue-carbon-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - blue-carbon-network
    restart: unless-stopped

  # IPFS Node
  ipfs:
    image: ipfs/kubo:latest
    container_name: blue-carbon-ipfs
    environment:
      - IPFS_PROFILE=server
    volumes:
      - ipfs_data:/data/ipfs
    ports:
      - "4001:4001"  # P2P
      - "5001:5001"  # API
      - "8080:8080"  # Gateway
    networks:
      - blue-carbon-network
    restart: unless-stopped

  # Node.js Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: blue-carbon-backend
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=blue_carbon_mrv
      - DB_USER=${DB_USER:-bluecarbon}
      - DB_PASSWORD=${DB_PASSWORD:-secure_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - IPFS_HOST=ipfs
      - IPFS_PORT=5001
      - IPFS_PROTOCOL=http
      - POLYGON_RPC_URL=${POLYGON_RPC_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000}
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
      - ipfs
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    networks:
      - blue-carbon-network
    restart: unless-stopped

  # React.js Dashboard
  dashboard:
    build:
      context: ../dashboard
      dockerfile: Dockerfile
    container_name: blue-carbon-dashboard
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_MAPBOX_TOKEN=${MAPBOX_TOKEN}
      - REACT_APP_POLYGON_RPC_URL=${POLYGON_RPC_URL}
      - REACT_APP_CONTRACT_ADDRESS=${CONTRACT_ADDRESS}
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - blue-carbon-network
    restart: unless-stopped

  # Python Data Analysis Service
  data-analysis:
    build:
      context: ../data-analysis
      dockerfile: Dockerfile
    container_name: blue-carbon-data-analysis
    environment:
      - PYTHONPATH=/app
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=blue_carbon_mrv
      - DB_USER=${DB_USER:-bluecarbon}
      - DB_PASSWORD=${DB_PASSWORD:-secure_password}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./drone-data:/app/data
      - ./models:/app/models
      - ./reports:/app/reports
    networks:
      - blue-carbon-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: blue-carbon-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - dashboard
      - backend
    networks:
      - blue-carbon-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: blue-carbon-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - blue-carbon-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: blue-carbon-grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - blue-carbon-network
    restart: unless-stopped

  # Blockchain Node (Optional - for local development)
  ganache:
    image: trufflesuite/ganache-cli:latest
    container_name: blue-carbon-ganache
    ports:
      - "8545:8545"
    command: ganache-cli --host 0.0.0.0 --port 8545 --networkId 1337 --accounts 10 --deterministic
    networks:
      - blue-carbon-network
    profiles:
      - development

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ipfs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  blue-carbon-network:
    driver: bridge
